// 1、246、2、123、3、82、6、41是数字246的除数。将这些除数平方，我们得到：1,60516，4,15129，9,6724，36,1681。这些平方和是84100，即290*290。
// 任务
// 求m和n之间的所有整数（1<=m<=n的m和n个整数），使它们的平方因子之和本身就是一个平方。
// 我们将返回子数组或元组数组（在C中是成对数组）或字符串。子数组（或元组或对）将有两个元素：首先是平方因子为平方的数，然后是平方因子的和。
// 例子：
// 列表平方（1,250）-->[1,1]，[42,2500]，[246,84100]]
// 列表平方（42,250）->[42,2500]，[246,84100]
// 示例的形式可能因语言而异，请参见“示例测试”。
// 笔记
// 在Fortran语言中，与任何其他语言一样，返回的字符串不允许包含任何冗余的尾随空格：您可以使用动态分配的字符串。

// 思路分析:
// 根据题意,首先就是要循环出m,n; 然后就是循环出的每个值i,要从1到i做循环,找出整除的因子,推送到临时数组中
// 然后再用reduce 求因子平方和 看看开平方以后时候是一个整数,如果是整数的就返回[i, 因子平方和]

// 解法一:
const listSquared = (m, n) =>  {
  let res = []
  for (var i = m ; i <= n; i++) {
    let result = []
    for (var j = 1; j <= i; j++) {
      if (i % j === 0) {
        result.push(j)
      }
    }
    const sqrtSum = result.reduce((pre,cur) => pre + Math.pow(cur,2), 0)
    if (Math.sqrt(sqrtSum) % 1 === 0) {
      res.push([i,sqrtSum])
    }
  }
  return res
}
